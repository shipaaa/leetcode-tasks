package main

import "fmt"

func main() {
	input1, input2, input3 := "leetcode", "ffdcabikjuwdknvajsdwfuqjlhgpqqqfhpsrfhcqeuwinmgbrbtikwjmvaamthbqqvpilwtsajvaswiqfaoglfthetgheffgipjxrwsjmeerrkkhtgrqxiruiapjckgaomqwghqgsejejjufmeoopaakjweipnememuftidpikgkmcpcxcuqlmkrpvdwbgwmajweijnnhfdjqwbwgptgtnorboorrpuotrvlvtgbpwokwfvrxduqxkncqrvkpnoeumctkwekpmjwwoatlpwppevunnwcldmmfldsorbxrremiruucdcrssrxfttanxpievkbsvuslcvttxanuogqjvgmlddtmbphctprhrgkobwfaqueqbukmfwjouxfjksbxvqisogxswhrptrsauujdjqxfwgnebkwtcxqglubpqwpijoacgutfcepjsatfioogleqsbrqmavhtclmhxgkuhtpkighlupjphnpnqtutwlbpfbahijvwbujqxgbqathxxuxahvvsbbfwchsrbgmexxekiljkrfawdahtxetkjnlgknehrmgocnxkckxsssmeschgpswdxrtavefprlfecuewwnlabutjmjpaagwetnvuctnsauinopkhmlwegcgmcfhljqupmqkbssmqpfhkhtrnluonsutgugxndrgclsabubcbwadlucbptbeuntuabvxxgiowqlicrjxmunkigtspfjbcwwhhkjpbjfsdcednqrdsjlnbepelbelmovgootakmjejbuhsskguwcuwpvpmglenejpegbieadtpwtwixdihlkiwondcnntujjeqkfifftoojcxjwebgpexkchjfokhqefeljpjglcxwbhjtansathtcdepealcsgnhfdvbpiovphnopehjugdcwaloblhtchcvwsrcihsirsbnvlbhdjjwvcmpkqokawewfddtqwdaelvofmlvfuaobaaqihixmujsubrdavlfpjajwqwbcgirqlwdkhosnqtrrrvmjorhdndwkhjnsirrdcggsjxdelrlfgwfjogwipnfxaeimrmvkortgmmkbmlqiongqhakwgwogeqbbcrnvpojajdpeucqcjjxabjumdocgcesrcgrlenqoihlfsnmsjkixerkmnwpjkismcfbfggqiifmdhvcrdqrgxgwunvwvgmjsbvflmcrijxdalamxbeknskwvctiuerxligfnxalnvujknqiednuugvmpfbdeegeopjkdwrworeekguqqjdvdtngswwbnxeqmnvkvkekmqiohnftlchwbaegvmkqbvktnllgssbxhxhwttkiewiaawktbposofqojajplxifwbrlmxtrmoxrgmnehjjogighxnrdqjsvdugpesrvlkctdlhdexdmhffxbjdejxwvuaprbudebrdmbkxhleueknuxnvvbfsmpsodjlmjwfmbghkoilwvwoplfejrrobfbfgtpmldtbsviutlotffkveddnewwsfivfhgdkacttugjjmobucfqnelqchvpsnvrskenhmfwubmtwwxrgnuaxoldsbnegcnxlonnbwveesantahpjnsklsloulwnwmhgbmclrxagkxrxhlvjfkhwrruqbuisbsdgmukqoxicipxjmgjibwmujtojbvetierwunoscvvrmdclicunooivcixjtvjalmkajxuslbfexklvexfgmvtpvgrirfqjsxnlsegbcmsjbnjaqmentjwmsadwbnigniliarunxgmkstucdbsidkicbuoteebqeftvlreisgjojvnmhhwrtbjtkkahkldvowvtdrqicfluqcdhsoahvgkouutkdrppuujcauhpjlswvthrfvjsxaksrhpvhpuegxicsqcmvpmdrapeifiksirbhodonusgmwrmifihxrldmavgtofwvvakooxogjktfkmotvbaxkwoneibvpaasifniclgcodntsskdfwpusomwdjupikphbtseaaurkntuxcgipfmairnfoxpskkenxhbrqeckfivrammblbxjncbdnsrmfrnekdsqlshprfsswrlabpiaagaaxdmfqvtmdgvjbhtotlmhjillxbpfchtdeaxxmrwnsadmjffawlkpabltawepduiofmcqbcxwwkcqelhnqmuttevaswqisvipcevrgsmqqdlprcqvjgtlecibocbwptuxccjktipdhmhxrrqpkbvxqcmidjbkmvcwgnudrewxmtubuqhnlgdpkfrlrlomwdmmnvxuihduxcefrpnvluvtakxtcbkuqgrqadlexxubhjvlaxlidtucsrhqmkdcxfauxognxxdafwbsspxnseofbcxsxwlvoqdobobfxuphadplhqkgjgvmnwqimwrotprxoenmaqahbxhgganbxbphnedudbfvwtsxqprubsgxpdilqjgpfwwnsewelphcrdwnmpeeddrrtwusntwalurathdruihmbivtfnqtocjdeiccteouqlxgjeqkanfvqjxpqimcrhopdbcffgvtuukqtlpbmybtooekiqirnkatasvrrjsuagbwcvhedjlxlhmmloeqbmxhckjpadxreruqgbhutilrfvimbaigoeunssxhrodaqntvgxjrucrjppwuejmflkndxihivbgrkdwokimdpxwwpnhsbgatrpddsokmlnagnsnlucacmiirwauxcbmbhcptkeobubjwplqujaffcebddxtlpbahhdptaafqxvjirmajexlgktpspcwwagueglfvuenjnbivcadcdjcttwmojkeherbcwriqnaqtgwgvcesownsfgmgjkgmalbvphnpdlkuabtdilkooglutcfpjbwaxwgseqiexhutgxqandbfstewxqjgpxlhvfrwjcjgmjvugpglgsbjcmxbpqjtteubbxjtonifsigpisufjbtjnkugmjvgvhbwvngpcafrinouehdxphveveudgllpfisghobugtrchifdjpriqnkmqdokfifocbijbtrbtpliqiuebcaxdlxqhwkcjfctfhshrdgoxmelrfjxshxokigacwbsjvcwwnraxhblsrlucjwmfwxudnwujlseggwxnjlvnxaiwxijvrdtrjpqxbqulufpqinwstsescwnbgllqphnqvhmwfdqjrttxequuuwwvriseunlntkqivqxqjxalekidkvxvuvextaphmvhkvuflhqbmumersnwljwalcbmajnuketjiugvxtkkdgdmtgrnictqxxcqqshrfvahwqxxusdcnrtrrwqfsecgbsoxophxpgldoshkuefcksmrkcbgjavriepithmucqemgchqoqhqcuhoxteqvnedfefnqtwkusdchhfijornneloabcenufljlgvtloxffjujsmbgimksfalftcqtvcrkrequgdnxiguesbnfuhfcvhdvsuwfpsuivoovvvlbuirhiwlvskinuhasfjeusowvivxupfqcrrlmtctatwrdlqrkvqmqqfwprplsvkodoikruonuwskuclogbbuigpfajhcahmeumnxxdjbcfgrhixowcfowxmrwxkmdedcnsrqohtqcntanomlcqdbabntkukkgeqafbtwvrmiuiqowtkujslfhurllposxqcgwamkoansqgvlsicjeagktjicljgvqicmwqskxvvovwshjvldludilaloaslmxthkoihhbxufubikkroqglkxjajidjuvfsbqwclkuhlvfhoeperjvqdxlkkjeprkjmapnlmshfbaihvnoxwwqbxasvhxlltcfsnnnvuguqgvfbmvacnaoofsgsxmpwjmpextmacqbatdtxluneuvqqffpqsxkadkiboktdppxhpmugkduwfxwxisuibikijlqjlashsdgsspgicigaquicvpgsdgagmxpgfprutuwueusvknebdwvcvnofitmdtofveopblcwdolhncaeriehwgnbcqonhhqbbrmvgqfixhehxldgbxvepcwsqexnbxnmalduuvnsrixideuebotvmipqalosclvgckksdpcnrqudcffmqpnkorssrwuvblaxagrhkamrgptqupvixjttfmwbuehghqphkiifcplninepqaewvffxablfqnqeebinpxxksmitrdxxplrplrlphrqworhjhgulpewhdarrwqnsifosaqflutxmobnliiuxmwfmfkqqsuugmicbohdlehpgxmqtiwgclnfjpklalawmllnccqwpsniwcccbximlhruosbmijlbuuxqgokmhmolcwmbfnhneollsfgssnvhopcrfkngscbwdmjppqsatqcthbbmuxpxbfhjpnsnjnhcqlblwljpjooktflmpwqagwtqlaipunwxluvntufjgiikgkkbddimfbqpdkxgdbaospdmolzwsnxbkxblqficwxvufmajfcvngtgkprjofgdbwnnkwvgkjxsrsokxupdghblwowjbgsfjbmawetvevkaukpvcgjuhnqmqsboxgcuqelrhdosauiwxuicjmpqcpraqudxinnaiptbfdghgmiuicqxewcvgxtihutvelmrqkloimmtowlkrcahlmsnktxklssoeahiimmkbnaorcqbbvpxongpiueqvgiuwlneixnfgirrfxqjqdobncgupcdcnxmxefxwibxnjtadtxkagmumatmthuuwehxfmhenqtjuaxuveahatpkahanmiugwimiiqwvjrnekfugfgtgaxnqwkbmxkikktxhiwnbcrwanwcgflqqqshfvsgpfvbpqlpglitbrjimhnatnbgvbelswfowfcxgscwldexuncbbqrxwlkxukorwpecsipsxaxkopmceosswwbhwbvbgegtscqsdmnjqqbeaapuwftludhqewcfcnnpnxioitnoeucurnnneblmtwcchdidbpegaudfcnnxrdrkiwgvgcuecqcfqhrtccjadtdbaaxfaowgnmcddrfnrapigkuuwmwvfdhidwbaqebhcnrqevwvjgbmkmbqfxjfxfodkhvhsfsgudlurgofkcbjmwrfwdmxqiccwjbdnjbtwojxruhedffxthkmjggeaucvxopvcjxwofrjeiaengogqqfeqcpnbsotenotjmcxmambdbjtpnefchkhagghragvvhwvrctnrpliwikccdqvcwcludnfarttmdhfsudkfdegmmergpqopndccqdgpslvgjjsfraepljtgnfqcbwqkcpssfarwvxdobedksumihqxdlgxxkiltpulvknhmjhvcmibqvfspalsuxifmrqojueptiqqcouksbvmiufnfvrtrqjebofdmhvftgsexvudhjedcodojordbgcsasxifsjenntsufbqjkdanmgoutvknkmihmggmehfllueiwjrxwtrjnalgvmielgnwmreqgpicctqmbwvcvnphrqvgtouwjhdoksespbevkkpivhobvxcxjogvotaffjihprucpflkjhjlkdsfilcqtcesntspwtvqkmvpxllrjufvqmsvwahlbejoawtmensruuprvtntbiniabgsnnaxtetqxndfxppudrcstvrickhjskouhugfaddjtwkkailpsdgxjrhhtmmdmxjclmjfqhiatcxsodikwlkcgqhbmnmeiaqmkfrodbuwxstfcnewrhxlkiavgnoevfdmtxoqccndieonthacsjfcvlduieuedgcpwkxeuqeovkixjrexjpeoqxawssuelmvilwvsjfbqwsjwmdpnhtmxkwhcuhpdmnuntljjkxuiewiqnoltkdugtoiqptnkxcowfbqcgiuhgnpfdqocnbodersbkpgicmuusqfnfpdmegegwtrjfmavtghnnjcwpjghijxritxixdqthnejeutndufljcalolmwjcfgwwrtoltlnqxcrjwsbfvevlbivjvcfvqvpxbmjgexqsjlfdlvhqgijsvmgcdkcaaolwweqmnorfeuxsqvefkgwrubiqexkvvadtkkevebgaoghoodbuxwlwwmesjqfkoeoodperspktabvhnhfvgralchjisobj", "aabb"
	output1, output2, output3 := firstUniqChar(input1), firstUniqChar(input2), firstUniqChar(input3)
	fmt.Println(output1, output2, output3)
}

func firstUniqChar(s string) int {
	if len(s) == 0 {
		return -1
	}

	charCount := make(map[rune]int)
	for _, v := range []rune(s) {
		charCount[v]++
	}

	for i, v := range []rune(s) {
		if charCount[v] == 1 {
			return i
		}
	}

	return -1
}
